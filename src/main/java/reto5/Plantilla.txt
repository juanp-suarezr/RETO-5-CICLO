

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Vista
public class VistaRequerimientos {

    public static final ElControladorDeRequerimientos controlador = new ElControladorDeRequerimientos();

    public static void requerimiento1(){
        
        try {
            ArrayList <Requerimiento_1> lista1 = controlador.consultarRequerimiento1();

            for (Requerimiento_1 reque : lista1){

                System.out.printf("%d %s %s %s %s %n",
                reque.getID_Proyecto(),
                reque.getCiudad(),
                reque.getBanco_vinculado(),
                reque.getConstructora(),
                reque.getClasificacion()
                );
            }
        } catch (Exception e) {
            System.err.println("Ha ocurrido un error!"+e.getMessage());
        }
    }

    public static void requerimiento2(){
        
        try {
            ArrayList <Requerimiento_2> lista2 = controlador.consultarRequerimiento2();

            for (Requerimiento_2 reque : lista2){

                System.out.printf("%s %s %s %s %d %n",

                reque.getNombre(),
                reque.getPrimer_Apellido(),
                reque.getCiudad_Residencia(),
                reque.getCargo(),
                reque.getSalario() 
                );
            }
        } catch (Exception e) {
            System.err.println("Ha ocurrido un error!"+e.getMessage());
        }
    }

    public static void requerimiento3(){
        try {
            ArrayList <Requerimiento_3> lista3 = controlador.consultarRequerimiento3();

            for (Requerimiento_3 reque : lista3){

                System.out.printf("%s %s %s %n",

                reque.getProveedor(), 
                reque.getPagado(),
                reque.getConstructora() 
                );
            }
        } catch (Exception e) {
            System.err.println("Ha ocurrido un error!"+e.getMessage());
        }
    }
}


// Controlador
public class ElControladorDeRequerimientos {
    
    private final Requerimiento_1Dao REQUERIMIENTO_1DAO;
    private final Requerimiento_2Dao REQUERIMIENTO_2DAO;
    private final Requerimiento_3Dao REQUERIMIENTO_3DAO;

    public ElControladorDeRequerimientos(){
        this.REQUERIMIENTO_1DAO= new Requerimiento_1Dao();
        this.REQUERIMIENTO_2DAO= new Requerimiento_2Dao();
        this.REQUERIMIENTO_3DAO= new Requerimiento_3Dao();
    }
    
        public ArrayList<Requerimiento_1> consultarRequerimiento1() throws SQLException {
            return this.REQUERIMIENTO_1DAO.requerimiento1();
        }
    
        public ArrayList<Requerimiento_2> consultarRequerimiento2() throws SQLException {
            return this.REQUERIMIENTO_2DAO.requerimiento2();
        }
    
        public ArrayList<Requerimiento_3> consultarRequerimiento3() throws SQLException {
            return this.REQUERIMIENTO_3DAO.requerimiento3();
        } 

}

// Modelo
// VO
public class Requerimiento_1 {
    private Integer ID_Proyecto;
    private String Ciudad;
    private String Banco_vinculado;
    private String Constructora;
    private String Clasificacion;

    public Requerimiento_1() {}

    public Requerimiento_1(Integer ID_Proyecto, String Ciudad) {

        this.ID_Proyecto = ID_Proyecto;
        this.Ciudad = Ciudad;

    }

    public Integer getID_Proyecto() {
        return ID_Proyecto;
    }

    public void setID_Proyecto(Integer iD_Proyecto) {
        ID_Proyecto = iD_Proyecto;
    }

    public String getCiudad() {
        return Ciudad;
    }

    public void setCiudad(String ciudad) {
        Ciudad = ciudad;
    }

    public String getBanco_vinculado() {
        return Banco_vinculado;
    }

    public void setBanco_vinculado(String banco_vinculado) {
        Banco_vinculado = banco_vinculado;
    }

    public String getConstructora() {
        return Constructora;
    }

    public void setConstructora(String constructora) {
        Constructora = constructora;
    }

    public String getClasificacion() {
        return Clasificacion;
    }

    public void setClasificacion(String clasificacion) {
        Clasificacion = clasificacion;
    }

    

}

public class Requerimiento_2 {
    
    private String Nombre;
    private String Primer_Apellido;
    private String Ciudad_Residencia;
    private String Cargo;
    private Integer Salario;

    public Requerimiento_2() {

    }


    public String getNombre() {
        return Nombre;
    }

    public void setNombre(String nombre) {
        Nombre = nombre;
    }

    public String getPrimer_Apellido() {
        return Primer_Apellido;
    }

    public void setPrimer_Apellido(String primer_Apellido) {
        Primer_Apellido = primer_Apellido;
    }

    public String getCiudad_Residencia() {
        return Ciudad_Residencia;
    }

    public void setCiudad_Residencia(String ciudad_Residencia) {
        Ciudad_Residencia = ciudad_Residencia;
    }

    public String getCargo() {
        return Cargo;
    }

    public void setCargo(String cargo) {
        Cargo = cargo;
    }

    public Integer getSalario() {
        return Salario;
    }

    public void setSalario(Integer salario) {
        Salario = salario;
    }

    

}

public class Requerimiento_3 {
    private String Proveedor;
    private String Pagado;
    private String Constructora;


    public Requerimiento_3() {}

    public String getProveedor() {
        return Proveedor;
    }

    public void setProveedor(String proveedor) {
        Proveedor = proveedor;
    }

    public String getPagado() {
        return Pagado;
    }

    public void setPagado(String pagado) {
        Pagado = pagado;
    }

    public String getConstructora() {
        return Constructora;
    }

    public void setConstructora(String constructora) {
        Constructora = constructora;
    }

    
    
}

// DAO
public class Requerimiento_1Dao {   

    
    public ArrayList<Requerimiento_1> requerimiento1() throws SQLException {
        ArrayList<Requerimiento_1> respuesta = new ArrayList<Requerimiento_1>();

        Connection conexion = JDBCUtilities.getConnection();

        try {

            String Consulta = "SELECT ID_Proyecto, Ciudad, Banco_Vinculado, Constructora, Clasificacion " 
            + "from Proyecto where Clasificacion = 'Condominio' AND Fecha_Inicio Between '2020-01-01' and '2021-12-24';";

            PreparedStatement statement = conexion.prepareStatement(Consulta);
            ResultSet resultset = statement.executeQuery();

            while (resultset.next()) {

                Requerimiento_1 requerimiento_1 = new Requerimiento_1();
                requerimiento_1.setID_Proyecto(resultset.getInt("ID_Proyecto"));
                requerimiento_1.setCiudad(resultset.getString("Ciudad"));
                requerimiento_1.setBanco_vinculado(resultset.getString("Banco_Vinculado"));
                requerimiento_1.setConstructora(resultset.getString("Constructora"));
                requerimiento_1.setClasificacion(resultset.getString("Clasificacion"));

                respuesta.add(requerimiento_1);
            }
            resultset.close();
            statement.close();

        } catch(SQLException e) {
            
            System.err.println("error consultado " +e);

        } finally {
            if (conexion != null) {
                conexion.close();
            }
        }
        return respuesta;
    }
}

public class Requerimiento_2Dao {
    
    public ArrayList<Requerimiento_2> requerimiento2()  throws SQLException {
        ArrayList<Requerimiento_2> respuesta = new ArrayList<Requerimiento_2>();

        Connection conexion = JDBCUtilities.getConnection();

        try {

            String Consulta = "Select Nombre, Primer_Apellido, Ciudad_Residencia, Cargo, Salario " 
            + "from Lider where Salario < 510000 and Cargo= 'Asesor' or Cargo= 'Coordinador' and Salario < 510000;" ;

            PreparedStatement statement = conexion.prepareStatement(Consulta);
            ResultSet resultset = statement.executeQuery();

            while (resultset.next()) {

                Requerimiento_2 requerimiento_2 = new Requerimiento_2();
                requerimiento_2.setNombre(resultset.getString("Nombre"));
                requerimiento_2.setPrimer_Apellido(resultset.getString("Primer_Apellido"));
                requerimiento_2.setCiudad_Residencia(resultset.getString("Ciudad_Residencia"));
                requerimiento_2.setCargo(resultset.getString("Cargo"));
                requerimiento_2.setSalario(resultset.getInt("Salario"));
                

                respuesta.add(requerimiento_2);
            }
            resultset.close();
            statement.close();

        } catch(SQLException e) {
            
            System.err.println("error consultado " +e);

        } finally {
            if (conexion != null) {
                conexion.close();
            }
        }
        return respuesta;
    }

}

public class Requerimiento_3Dao {
    //Obtener los 10 proyectos rankeados segÃºn las compras
    public ArrayList<Requerimiento_3> requerimiento3()  throws SQLException {
        ArrayList<Requerimiento_3> respuesta = new ArrayList<Requerimiento_3>();

        Connection conexion = JDBCUtilities.getConnection();

        try {

            String Consulta = "select C.Proveedor, C.Pagado, P.Constructora "
            + "from Compra C inner join Proyecto P on C.ID_Proyecto= P.ID_Proyecto where C.Pagado = 'No' and C.Proveedor = 'JUMBO' ;";

            PreparedStatement statement = conexion.prepareStatement(Consulta);
            ResultSet resultset = statement.executeQuery();

            while (resultset.next()) {

                Requerimiento_3 requerimiento_3 = new Requerimiento_3();
                requerimiento_3.setProveedor(resultset.getString("Proveedor"));
                requerimiento_3.setPagado(resultset.getString("Pagado"));
                requerimiento_3.setConstructora(resultset.getString("Constructora"));
                

                respuesta.add(requerimiento_3);
            }
            resultset.close();
            statement.close();

        } catch(SQLException e) {
            
            System.err.println("error consultado " +e);

        } finally {
            if (conexion != null) {
                conexion.close();
            }
        }
        return respuesta;
    }
}
